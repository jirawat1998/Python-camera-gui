import cv2
import tkinter as tk
from tkinter import Label, Button, filedialog, Toplevel
from PIL import Image, ImageTk
import datetime
import os

# ‡∏Å‡∏•‡πâ‡∏≠‡∏á (0 = ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á notebook)
cap = cv2.VideoCapture(0)

# GUI ‡∏´‡∏•‡∏±‡∏Å
root = tk.Tk()
root.title("Camera Preview")
root.geometry("800x600")

label = Label(root)
label.pack()

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
is_previewing = False
save_dir = os.getcwd()  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô script
last_captured_frame = None  # ‡πÄ‡∏Å‡πá‡∏ö frame ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ

def show_frame():
    global is_previewing
    if is_previewing:
        ret, frame = cap.read()
        if ret:
            cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(cv2image)
            imgtk = ImageTk.PhotoImage(image=img)
            label.imgtk = imgtk
            label.configure(image=imgtk)
        label.after(10, show_frame)

def start_camera():
    global is_previewing
    is_previewing = True
    show_frame()

def stop_camera():
    global is_previewing
    is_previewing = False
    label.configure(image="")  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏†‡∏≤‡∏û

def capture_image():
    global last_captured_frame
    ret, frame = cap.read()
    if ret:
        last_captured_frame = frame
        show_preview_popup(frame)

def show_preview_popup(frame):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏†‡∏≤‡∏û
    popup = Toplevel(root)
    popup.title("Preview")
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    img = Image.fromarray(cv2image)
    imgtk = ImageTk.PhotoImage(image=img)
    
    lbl_preview = Label(popup, image=imgtk)
    lbl_preview.image = imgtk  # ‡∏Å‡∏±‡∏ô gc
    lbl_preview.pack()

    def save_image():
        global save_dir, last_captured_frame
        if last_captured_frame is not None:
            filename = f"capture_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            filepath = os.path.join(save_dir, filename)
            cv2.imwrite(filepath, last_captured_frame)
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô {filepath}")
        popup.destroy()

    def retake_image():
        popup.destroy()

    btn_save = Button(popup, text="‚úîÔ∏è Save", command=save_image)
    btn_save.pack(side="left", padx=10, pady=10)

    btn_retake = Button(popup, text="üîÑ ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", command=retake_image)
    btn_retake.pack(side="right", padx=10, pady=10)

def choose_directory():
    global save_dir
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        save_dir = folder_selected
        print(f"üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {save_dir}")

def close_app():
    global is_previewing
    is_previewing = False
    cap.release()
    root.destroy()

# ‡∏õ‡∏∏‡πà‡∏°
btn_start = Button(root, text="üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á", command=start_camera)
btn_start.pack(pady=5)

btn_stop = Button(root, text="üõë ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á", command=stop_camera)
btn_stop.pack(pady=5)

btn_capture = Button(root, text="üìå ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û", command=capture_image)
btn_capture.pack(pady=5)

btn_choose_dir = Button(root, text="üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏ü", command=choose_directory)
btn_choose_dir.pack(pady=5)

btn_exit = Button(root, text="‚ùå ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", command=close_app)
btn_exit.pack(pady=5)

root.mainloop()
